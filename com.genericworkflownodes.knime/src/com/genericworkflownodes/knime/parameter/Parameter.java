/**
 * Copyright (c) 2012, Marc RÃ¶ttig.
 *
 * This file is part of GenericKnimeNodes.
 * 
 * GenericKnimeNodes is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.genericworkflownodes.knime.parameter;

import java.io.Serializable;

/**
 * The generic Parameter base class is used to store all possible CTD parameters
 * (double, int, string, int list, ...).
 * 
 * @author roettig
 * 
 * @param <T>
 *            The type of the stored parameter.
 */
public abstract class Parameter<T> implements Serializable {
	/**
	 * The serial version UID.
	 */
	private static final long serialVersionUID = 2145565007955019813L;

	/**
	 * The unique key identifying the parameter.
	 */
	private String key;

	/**
	 * The actual value of the parameter.
	 */
	private T value;

	/**
	 * A description of the parameter.
	 */
	private String description;

	/**
	 * The section used to categorize the parameter.
	 */
	private String section;

	/**
	 * Flag indicating if the parameter is optional or not.
	 */
	private boolean isOptional;

	/**
	 * Flag indicating if the parameter should be hidden from the "average"
	 * user.
	 */
	private boolean advanced;

	/**
	 * Flag indicating if the parameter is to be ignored.
	 */
	private boolean isIgnored;

	/**
	 * Constructor with unique key of parameter and generic value to store.
	 * 
	 * @param key
	 *            the key of the parameter
	 * @param value
	 *            the generic value of the parameter
	 */
	public Parameter(final String key, final T value) {
		this.key = key;
		this.value = value;

		this.setDescription("");
		this.setSection("default");
		this.setIsOptional(true);
		this.setAdvanced(false);
		this.setIsIgnored(false);
	}

	/**
	 * Returns the associated unique key (name) of the parameter.
	 * 
	 * @return key
	 */
	public String getKey() {
		return key;
	}

	/**
	 * Sets the unique key (name) of the parameter.
	 * 
	 * @param key
	 *            the key of the parameter
	 */
	public void setKey(final String key) {
		this.key = key;
	}

	/**
	 * Returns the generic value stored by this object.
	 * 
	 * @return the value of the parameter.
	 */
	public T getValue() {
		return value;
	}

	/**
	 * Sets the value stored by this object.
	 * 
	 * @param value
	 *            the value to store
	 */
	public void setValue(final T value) {
		this.value = value;
	}

	/**
	 * Returns the description for this parameter object.
	 * 
	 * @return the description text of the parameter.
	 */
	public String getDescription() {
		return description;
	}

	/**
	 * Sets the description text of this parameter object.
	 * 
	 * @param description
	 *            the description text of the parameter.
	 */
	public void setDescription(final String description) {
		this.description = description;
	}

	/**
	 * Returns the section (category) for the parameter.
	 * 
	 * @return section the section of the parameter
	 */
	public String getSection() {
		return section;
	}

	/**
	 * Sets the section (category) for the parameter.
	 * 
	 * @param section
	 *            the section of the parameter.
	 */
	public void setSection(final String section) {
		this.section = section;
	}

	/**
	 * Returns if this parameter has <code>null</code> as value.
	 * 
	 * @return <code>true</code> if the parameter is <code>null</code>,
	 *         <code>false</code> otherwise.
	 */
	public boolean isNull() {
		if (value == null) {
			return true;
		}
		return false;
	}

	/**
	 * Returns whether the parameter is deemed optional.
	 * 
	 * @return True if the parameter is optional, false otherwise.
	 */
	public boolean isOptional() {
		return isOptional;
	}

	/**
	 * Sets whether the parameter is deemed optional.
	 * 
	 * @param isOptional
	 *            flag whether parameter is optional.
	 */
	public void setIsOptional(final boolean isOptional) {
		this.isOptional = isOptional;
	}

	/**
	 * Returns a textual information about the data type stored in this object.
	 * 
	 * @return mnemonic of parameter
	 */
	public abstract String getMnemonic();

	/**
	 * Extracts data stored in the supplied string (previously generated by
	 * {@link Parameter#getStringRep()}) representation and set the value
	 * accordingly.
	 * 
	 * @param s
	 *            special string representation of parameter.
	 * @throws InvalidParameterValueException
	 *             If the given string does not contain a valid value for the
	 *             parameter.
	 */
	public abstract void fillFromString(String s)
			throws InvalidParameterValueException;

	/**
	 * Returns a special string representation which can be transferred through
	 * string channels and reconstructed later on using
	 * {@link Parameter#fillFromString()}.
	 * 
	 * @return special string representation of parameter
	 */
	public String getStringRep() {
		return this.toString();
	}

	/**
	 * Return whether the parameter is advanced (only for expert users) or not.
	 * 
	 * @return True if the parameter should only be shown to expert users, false
	 *         otherwise.
	 */
	public boolean isAdvanced() {
		return advanced;
	}

	/**
	 * Set whether the parameter is advanced (only for expert users) or not.
	 * 
	 * @param newAdvanced
	 *            New advanced flag for the parameter.
	 */
	public void setAdvanced(final boolean newAdvanced) {
		this.advanced = newAdvanced;
	}

	/**
	 * Checks whether the supplied generic value is compatible with the data
	 * type of the parameter.
	 * 
	 * @param val
	 *            value to validate.
	 * 
	 * @return True if the supplied value is valid, false otherwise.
	 */
	public abstract boolean validate(T val);

	/**
	 * Separator token.
	 */
	public static String SEPARATOR_TOKEN = "@@@__@@@";

	/**
	 * Return whether the parameter is to be ignored.
	 */
	public boolean isIgnored() {
		return this.isIgnored;
	}

	/**
	 * Sets whether the parameter is to be ignored (is the case if tagged with
	 * "file-ext-override).
	 *
	 * @param val The new "is ignored" value.
	 */
	public void setIsIgnored(boolean val) {
		this.isIgnored = val;
	}
}
